{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypePrettyCode, { Options } from 'rehype-pretty-code';\n\nexport const Writing = defineDocumentType(() => ({\n  name: 'Writing',\n  filePathPattern: `**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true,\n    },\n    spoiler: {\n      type: 'string',\n      description: 'A small description of the post'\n    },\n    featured: {\n      type: 'boolean',\n      description: 'If the writing should be featured',\n      default: false,\n      required: false\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n    },\n    status: {\n      type: 'enum',\n      options: ['draft', 'published'],\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: ({ _raw }: any) => {\n        return _raw.sourceFileName.replace(/\\.mdx?$/, '');\n      },\n    },\n  },\n}))\n\nconst rehypePrettyCodeOptions: Partial<Options> = {\n  theme: {\n    dark: 'github-dark',\n    light: 'github-light',\n  },\n  tokensMap: {\n    fn: 'entity.name.function',\n    objKey: 'meta.object-literal.key',\n  },\n  onVisitLine(node) {\n    // Prevent lines from collapsing in `display: grid` mode, and\n    // allow empty lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: 'text', value: ' ' }];\n    }\n    node.properties.className.push('syntax-line');\n  },\n  onVisitHighlightedLine(node) {\n    node.properties.className.push('syntax-line--highlighted');\n  },\n  onVisitHighlightedWord(node) {\n    node.properties.className = ['syntax-word--highlighted'];\n  },\n};\n\nexport default makeSource({\n  contentDirPath: './data/writing',\n  documentTypes: [Writing],\n  date: {\n    timezone: 'America/New_York',\n  },\n  mdx: {\n    rehypePlugins: [[rehypePrettyCode, rehypePrettyCodeOptions]],\n  },\n})"],
  "mappings": ";AAEA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,sBAAmC;AAEnC,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACvB;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,WAAW;AAAA,MAC9B,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,EAAE,KAAK,MAAW;AAC1B,eAAO,KAAK,eAAe,QAAQ,WAAW,EAAE;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAM,0BAA4C;AAAA,EAChD,OAAO;AAAA,IACL,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAAA,EACA,WAAW;AAAA,IACT,IAAI;AAAA,IACJ,QAAQ;AAAA,EACV;AAAA,EACA,YAAY,MAAM;AAGhB,QAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,WAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IAC/C;AACA,SAAK,WAAW,UAAU,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,uBAAuB,MAAM;AAC3B,SAAK,WAAW,UAAU,KAAK,0BAA0B;AAAA,EAC3D;AAAA,EACA,uBAAuB,MAAM;AAC3B,SAAK,WAAW,YAAY,CAAC,0BAA0B;AAAA,EACzD;AACF;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,OAAO;AAAA,EACvB,MAAM;AAAA,IACJ,UAAU;AAAA,EACZ;AAAA,EACA,KAAK;AAAA,IACH,eAAe,CAAC,CAAC,kBAAkB,uBAAuB,CAAC;AAAA,EAC7D;AACF,CAAC;",
  "names": []
}
